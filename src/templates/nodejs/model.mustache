const uuidv4 = require('uuid/v4');

const Base = require(`../Base.js`);

{{#Imports}}
const {{KlsName}} = require(`./{{KlsName}}.js`);
{{/Imports}}

{{#Model}}
class {{KlsName}} extends Base {
  // This class is auto generated by Cloud Events Generator
  // (https://github.com/michaelawyu/cloud-events-generator).
  //
  // Do not edit the class manually.

  constructor ({ bypassCheck = false{{#Vars}}, {{Name}} = {{#DefaultValue}}{{{DefaultValue}}}{{/DefaultValue}}{{^DefaultValue}}null{{/DefaultValue}}{{/Vars}} } = {}) {
    // {{KlsName}} - a model defined in Cloud Events Generator
    //
    {{#Vars}}
    // Param {{Name}}: The {{Name}} of this {{KlsName}}.
    // Type of {{Name}}: {{DataType}}
    {{/Vars}}
  
    super();
    this.paramTypes = {
      {{#Vars}}
      {{Name}}: {{{DataType}}}{{#HasMore}},{{/HasMore}}
      {{/Vars}}
    };
    this.attributeMap = {
      {{#Vars}}
      {{Name}}: '{{{BaseName}}}'{{#HasMore}},{{/HasMore}}
      {{/Vars}}
    };

    if (!bypassCheck) {
      {{#Vars}}
      this.{{Name}} = {{Name}};
      {{/Vars}}
    } else {
      {{#Vars}}
      this._{{Name}} = {{Name}};
      {{/Vars}}
    }
  }

  static fromObject (obj) {
    let model = new this({ bypassCheck: true });
    Object.keys(model.paramTypes).forEach(function (key) {
      let baseName = model.attributeMap[key];
      let typ = model.paramTypes[key];
      if (obj.hasOwnProperty(baseName)) {
        if (Array.isArray(typ)) {
          let itemTyp = typ[0];
          let arr = [];
          obj[baseName].forEach(function (elem) {
            if (itemTyp.fromObject === undefined) {
              arr.push(itemTyp(elem));
            } else {
              arr.push(itemTyp.fromObject(elem));
            }
          });
          model[key] = arr;
        } else {
          if (typ.fromObject === undefined) {
            model[key] = typ(obj[baseName]);
          } else {
            model[key] = typ.fromObject(obj[baseName]);
          }
        }
      } else {
        console.log(`cannot deserialize ${baseName} (${key}); field is missing from input and left empty/using the default value`);
      }
    });
    return model;
  }

  {{#Vars}}
  get {{Name}} () {
    // Gets the {{Name}} of this {{KlsName}}.
    //
    // {{Description}}
    //
    // returns: {{Name}}
    // returnType: {{DataType}}
    return this._{{Name}};
  }

  set {{Name}} ({{Name}}) {
    // Sets the {{Name}} of this {{KlsName}}.
    //
    // {{Description}}
    //
    // returns: undefined
    // returnType: undefined

    {{#Auto}}
    {{#IsUUIDv4}}
    if ({{Name}} === undefined || {{Name}} === null) {
      this._{{Name}} = uuidv4();
    } else {
      this._{{Name}} = {{Name}}
    }
    {{/IsUUIDv4}}
    {{#IsRFC3339}}
    if ({{Name}} === undefined || {{Name}} === null) {
      this._{{Name}} = (new Date()).toISOString();
    } else {
      this._{{Name}} = {{Name}}
    }
    {{/IsRFC3339}}
    {{/Auto}}
    {{^Auto}}
    {{#IsEnum}}
    let allowedValues = [{{#AllowableValues}}{{{Value}}}{{#HasMore}}, {{/HasMore}}{{/AllowableValues}}]
    {{#IsContainer}}
    {{#IsListContainer}}
    let valueSet = new Set({{Name}})
    valueSet.forEach(function (key, value, set) {
      if (!allowedValues.includes(value)) {
        throw Error(`Invalid value in array/list {{Name}}; it must be a subset of ${allowedValues}`);
      }
    })
    {{/IsListContainer}}
    {{/IsContainer}}
    {{^IsContainer}}
    if (!allowedValues.includes({{Name}})) {
      throw Error(`Invalid value for {{Name}} (${ {{Name}} }); it must be one of ${allowedValues}`);
    }
    {{/IsContainer}}
    {{/IsEnum}}
    {{^IsEnum}}
    {{#Required}}
    if ({{Name}} === undefined || {{Name}} === null) {
      throw Error(`{{Name}} must not be undefined or null`);
    }
    {{/Required}}
    {{#HasValidation}}
    if ({{Name}} === undefined || {{Name}} === null) {
      throw Error(`{{Name}} must not be undefined or null`);
    }
    {{#MaxLength}}
    if ({{Name}}.length === undefined || {{Name}}.length > {{MaxLength}}) {
      throw Error(`Invalid value for {{Name}}, length must be less than or equal to ${ {{MaxLength}} }`);
    }
    {{/MaxLength}}
    {{#MinLength}}
    if ({{Name}}.length === undefined || {{Name}}.length < {{MinLength}}) {
      throw Error(`Invalid value for {{Name}}, length must be greater than or equal to ${ {{MinLength}} }`);
    }
    {{/MinLength}}
    {{#Maximum}}
    if ({{Name}} >{{^ExclusiveMaximum}}={{/ExclusiveMaximum}} {{Maximum}}) {
      throw Error(`Invalid value for {{Name}}, must be a value less than {{#ExclusiveMaximum}}or equal to{{/ExclusiveMaximum}} ${ {{Maximum}} }`);
    }
    {{/Maximum}}
    {{#Minimum}}
    if ({{Name}} <{{^ExclusiveMinimum}}={{/ExclusiveMinimum}} {{Minimum}}) {
      throw Error(`Invalid value for {{Name}}, must be a value more than {{#ExclusiveMinimum}}or equal to{{/ExclusiveMinimum}} ${ {{Minimum}} }`);
    }
    {{/Minimum}}
    {{#Pattern}}
    const regex = new RegExp('{{{Pattern}}}')
    if ({{Name}}.match(regex) === null) {
      throw Error(`Invalid value for {{Name}}, must match pattern '{{{Pattern}}}'`)
    }
    {{/Pattern}}
    {{#MaxItems}}
    if ({{Name}}.length === undefined || {{Name}}.length > {{MaxItems}}) {
      throw Error(`Invalid value for {{Name}}, number of items must be less than or equal to ${ {{MaxItems}} }`);
    }
    {{/MaxItems}}
    {{#MinItems}}
    if ({{Name}}.length === undefined || {{Name}}.length < {{MinItems}}) {
      throw Error(`Invalid value for {{Name}}, number of items must be less than or equal to ${ {{MinItems}} }`);
    }
    {{/MinItems}}
    {{/HasValidation}}
    {{/IsEnum}}

    if ({{Name}} === undefined) {
      this._{{Name}} = null;
    } else {
      this._{{Name}} = {{Name}};
    }
  {{/Auto}}
  }
  {{/Vars}}
}


module.exports = {{KlsName}};
{{/Model}}
