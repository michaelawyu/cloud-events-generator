// Code generated by vfsgen; DO NOT EDIT.

package vfsgen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 8, 16, 6, 29, 12, 463913346, time.UTC),
		},
		"/nodejs": &vfsgen۰DirInfo{
			name:    "nodejs",
			modTime: time.Date(2019, 8, 16, 6, 29, 12, 463887834, time.UTC),
		},
		"/python": &vfsgen۰DirInfo{
			name:    "python",
			modTime: time.Date(2019, 8, 8, 4, 53, 20, 518289887, time.UTC),
		},
		"/python/README.md": &vfsgen۰CompressedFileInfo{
			name:             "README.md",
			modTime:          time.Date(2019, 8, 6, 4, 59, 20, 645250003, time.UTC),
			uncompressedSize: 528,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x4f\x6f\x13\x31\x10\xc5\xef\xfe\x14\x23\xe5\xd2\x88\x66\x73\xe8\xad\xb7\x08\x21\xe8\xa9\x11\x84\x53\x14\x29\x8e\xfd\xb2\xb6\xb0\x3d\xc6\x33\x4e\xb5\xdf\x1e\xed\x16\x0a\x48\x3d\x3f\xff\xe6\xfd\xf1\x8a\x3e\x26\xee\x9e\x3e\xdd\x50\x54\xe8\x33\x0a\x9a\x55\x6e\xb4\x6b\x1a\xaf\xd6\xa9\x18\xb3\x5a\xd1\xf3\x0d\xed\x16\xf1\x62\x0e\x21\x0a\x55\xeb\x7e\xd8\x11\x14\x85\xc6\x57\x00\x9e\x2e\x13\x69\x00\x1d\xdf\xbf\x77\xba\x0b\xaa\x55\x1e\xb7\xdb\x31\x6a\xe8\x97\xc1\x71\xde\xe6\xe8\x82\x45\xb2\x2f\x53\xdf\xba\x19\xdb\x60\xc1\x36\xe3\x1f\x6c\x3d\x98\x27\xa5\x80\x54\x85\x26\xee\x04\x2b\x11\x8d\x6a\x63\xdf\x1d\xc8\x16\x4f\x8e\x8b\xf4\x8c\xff\x7a\xdc\xff\x56\x52\xb2\x17\x9e\xe3\x11\x17\x33\x71\x6f\xb4\x18\x6c\x7c\x8b\x37\x14\x92\x49\x14\x59\x06\x63\x0e\x01\x6f\xad\xba\x40\x28\xb3\x8f\xd7\x08\x4f\x8a\x5c\x93\x55\x08\x5d\x1b\x67\x3a\x3e\x57\x94\xdd\xfe\xe9\xbd\x66\x5c\x51\x6c\x8d\x7f\xd3\x0f\x0a\x17\xd6\xc3\xb2\xe0\x57\xfc\xec\xb1\x21\xcf\xf1\xcc\x7e\xd2\xc0\x85\x1e\x3e\x2c\xd2\x77\xb1\x23\xcc\x81\x67\x67\xd2\x7f\x06\xbe\xa7\x58\x44\x6d\x4a\x14\x95\x12\x3b\x9b\xd2\xf4\x68\xcc\xf9\x7c\x36\x35\xd6\x87\x37\x75\x03\x3a\xee\x77\x87\x2f\xa7\x45\x32\xdf\x80\xd7\xaf\xf0\xec\xfa\x6c\x68\x35\x72\x39\xdd\xad\xe9\xca\x8d\x32\x37\xd0\xd8\xa3\x87\x2c\x2b\xcd\x47\x5a\x77\xf3\x13\x19\xcc\xaf\x00\x00\x00\xff\xff\x6b\x44\x20\x15\x10\x02\x00\x00"),
		},
		"/python/__init__.mustache": &vfsgen۰CompressedFileInfo{
			name:             "__init__.mustache",
			modTime:          time.Date(2019, 8, 8, 8, 8, 40, 752584975, time.UTC),
			uncompressedSize: 158,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xcc\xb1\x0e\xc2\x30\x0c\x04\xd0\xdd\x5f\x61\xa9\x0b\x0c\xc0\x5a\x75\x67\x42\xe5\x17\xa2\xd0\x38\xa8\x22\x89\x21\x4e\x58\xac\xfc\x3b\x2a\x81\xf1\xee\xf4\x6e\xc0\x85\xdd\x9a\xee\x13\xd6\xe2\x0f\x23\xc0\x80\x3e\xd8\x07\x8d\x13\x26\x7e\x59\xf0\x99\x23\x1a\xe3\x6b\xa9\x99\x8c\xc1\x35\x3e\x39\x17\xb4\x37\xe1\x50\x0b\x99\x9e\x37\xf6\x5b\xe8\x4d\xa9\xe0\x12\xac\xc8\x8e\x64\x0f\xaa\xc3\xcc\x4e\x5a\xfb\x3e\x1d\x55\x67\x76\x57\x1b\xa9\xb5\xbf\x50\x3d\x6f\xe6\x12\xa4\xf7\xa0\x7a\xea\x04\x3e\x01\x00\x00\xff\xff\xcb\x09\x33\x7e\x9e\x00\x00\x00"),
		},
		"/python/__init__mod.mustache": &vfsgen۰CompressedFileInfo{
			name:             "__init__mod.mustache",
			modTime:          time.Date(2019, 8, 6, 3, 44, 35, 949550340, time.UTC),
			uncompressedSize: 157,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8c\x4d\x0a\x02\x31\x0c\x46\xf7\x3d\x45\xa0\x6b\x75\x3b\xcc\x15\x06\xbc\x42\x89\xd3\x54\x06\xdb\x46\x9b\xd4\x4d\xe8\xdd\xc5\x51\xc1\xe5\xf7\xf3\x9e\x87\x95\xe3\x56\xaf\x33\x74\x4d\x87\xc9\x39\x0f\x29\xe3\x8d\xa6\x19\x2a\x3f\xd0\xa5\xc6\x05\x42\x48\x5d\x7b\xa3\x10\x60\x2b\x77\x6e\x0a\x78\x11\xce\x5d\x29\x7c\xf2\x1b\xfb\x2e\xf4\xa4\xaa\x80\x35\x42\x44\x45\x58\x33\x8a\x90\x38\x33\xbf\x64\x19\x63\xf7\x1d\xcd\x96\x2c\x67\x2c\x34\xc6\x8f\xfb\xab\x9c\xd9\x69\x3f\xbf\x02\x00\x00\xff\xff\xba\xbc\x4c\xcc\x9d\x00\x00\x00"),
		},
		"/python/base_model.mustache": &vfsgen۰CompressedFileInfo{
			name:             "base_model.mustache",
			modTime:          time.Date(2019, 8, 8, 8, 12, 31, 21303731, time.UTC),
			uncompressedSize: 2304,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x55\x4d\x6f\xe3\x36\x10\xbd\xeb\x57\x0c\x94\x43\x24\x40\x55\xdb\xab\x00\x17\x45\x0f\x45\x5b\x20\x6d\xd1\x0a\x7b\x31\x0c\x99\xb6\x46\x31\x13\x89\x64\x38\xe3\x85\xbd\x41\xfe\xfb\x82\xd4\xa7\x2d\x7b\xbd\x9b\xe5\xc5\x26\x39\xef\xcd\x9b\x47\x71\x28\x1b\xa3\x2d\xc3\x13\x69\x15\x74\xff\x8d\xb1\x52\x71\x3f\xe3\xa3\x91\xea\x31\xe8\xa7\x24\x0f\x41\x50\x59\xdd\x40\x0a\xdd\xd2\x9e\x65\x1d\x04\x39\x2c\xba\xd8\x34\x3f\x1a\xfc\x20\x6c\x74\x9f\xdf\xc7\x41\x10\x6c\x6b\x41\x04\x0f\xba\xc4\x3a\xd2\x9b\x27\xdc\x72\x9c\x05\x00\x00\x77\xa0\x0d\x2a\x61\xa4\x03\x50\x06\xf9\x0e\xe1\x19\x8f\x20\x09\x04\xb3\x95\x9b\x3d\x23\x28\xd1\x20\x08\x55\x02\xef\xb0\x43\x7d\x14\xf5\x1e\x4f\xa3\xf8\x68\x30\xf5\xdb\x1d\x65\xe1\x56\x08\x16\xf0\xfa\x16\x74\xb0\x21\xfa\x41\x98\x77\x24\x73\x16\xb5\x08\x05\x25\x56\x52\x49\x96\x5a\xb5\x49\x07\x86\xa2\x11\x66\x92\xf4\x57\x5f\x7b\x83\xbc\xd3\xa5\x5f\x28\xb1\x02\xe7\x5e\x51\xca\x2d\x47\xdb\x9a\xb2\xa9\x69\xcb\x7c\x95\x40\x29\x9f\x39\x86\x1f\x7e\x81\xbc\x75\xc9\x8d\x30\x0c\xff\x43\xde\x5b\x45\x4e\x19\x38\x30\x08\x02\x01\x8d\x73\x35\x0c\xc3\x21\xd2\xfa\x30\x7f\x26\x69\x89\x84\x56\x8a\x5a\x7e\xc2\xc2\x07\x46\x8e\x3b\x81\x6d\x4d\x71\x30\xc8\x61\xdd\x8a\x21\xac\xab\xf8\x6a\x4a\x8f\x07\x63\xb5\x41\xcb\x12\xa9\x4d\xef\x80\xc1\x00\xc9\xac\x33\x3d\x6b\x57\x27\x3c\x13\x71\xb4\xaf\x79\xe2\x8f\x1b\x95\xb6\xde\xbf\x04\x0a\x67\x2d\xc9\x43\x2a\x19\xad\x64\x6c\xc8\x8b\x4a\x4f\x8e\x74\x22\xd1\x8d\xf6\x78\x16\xf0\x88\xec\x48\x3c\x20\xf1\x7c\xf1\x49\x9c\xac\x40\x92\x54\xc4\x42\x6d\x31\xf2\xa8\x04\x6a\x49\x7c\xc6\x37\xca\x5c\x3a\x92\x15\x2c\x7c\x54\xd4\x08\x13\xcd\x02\xdd\xa8\x45\xb3\x29\x05\x1c\x32\x38\xa4\xbd\x95\xb1\x4b\xb7\x13\xe4\x15\x1d\x12\x08\xbb\x8d\x30\x06\xac\x09\xe1\x90\x5c\xa4\xf2\xaa\x66\x3b\xf1\x69\x21\x58\x4f\xb8\xbb\x3a\x46\xfe\x9b\xc5\x78\xc4\x28\x74\x4e\x3d\x77\xc9\x45\xde\x26\xf6\x7c\xb7\x5c\x72\x87\x9a\x41\xe4\x7e\x96\x3f\xad\x12\x3f\x5f\xfe\xbc\x1a\xf5\xc4\x17\xd1\x93\x8a\x3b\xc4\xdc\x53\xb7\xf1\x05\x5b\xd3\xf6\x7b\x9a\xf3\xcf\xec\x25\xfc\x3a\x13\x83\xf3\x3b\xd7\x06\xf9\xd5\x1b\x97\xff\xaf\xff\xff\xf9\xfb\xf2\xe5\x77\x4d\xa6\x20\xb6\x19\x10\xdb\x1b\x5d\xc0\xb1\x40\x29\x58\x5c\x69\x05\xee\xb2\xc3\xc2\x53\xa6\xb5\x16\x25\x45\x3d\x7b\x7c\x2e\x7d\x5b\x53\x3a\xb6\x25\xdf\x81\xc6\x3a\xba\x26\xe1\x45\xbf\xa7\x49\x78\x9d\xc4\xd6\x3f\x23\x3d\xb2\xef\x15\xc4\xf6\x4a\xab\xf0\xc2\xbc\xf8\x72\xdf\x98\xae\x15\x4c\x3e\x94\xa9\x36\xea\x6e\xfe\x75\x69\x6d\x7e\xb0\x68\x2c\x12\x2a\x16\xae\x79\x83\xae\x46\xdd\xdf\xac\xad\x7d\x27\x53\x53\x69\xdb\x08\x9e\xe9\x1b\xfc\x7b\x7d\xbd\xfb\x4d\xaa\x52\xaa\xc7\xb7\xb7\x7e\xe1\x4f\xfa\x23\xcf\xff\x1d\xe6\x3f\x9e\xcf\x47\xc0\x50\x66\x51\x38\xf1\x45\x71\xa1\xd0\xdf\xb5\x85\xb5\x57\xb3\xf6\xaf\xd7\xba\x95\xb6\xbe\x20\xba\x57\xe9\x1c\x8b\xa7\xe4\xf8\xd2\x51\x27\xa0\x79\x87\xf6\x8a\x95\xd6\x3d\x86\x15\x6c\x34\xef\xa0\x7d\xcc\x09\x84\x45\xc0\x97\xbd\xb8\xf4\x10\xf9\x7c\x85\x37\xa5\x28\x60\xb1\x68\xc9\x87\x95\xa9\x02\x85\xdf\xa5\x40\x69\xbe\xaa\xc2\xed\x39\xe6\x41\xc0\x10\xf0\x39\x00\x00\xff\xff\x32\x09\xa7\x28\x00\x09\x00\x00"),
		},
		"/python/model.mustache": &vfsgen۰CompressedFileInfo{
			name:             "model.mustache",
			modTime:          time.Date(2019, 8, 17, 10, 32, 39, 93480190, time.UTC),
			uncompressedSize: 5514,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x5b\x6f\xdb\x36\x14\x7e\xf7\xaf\x38\xb0\x1f\x2c\x61\x8e\x9c\xac\x1d\xb0\x19\x4d\xb1\xac\x49\xbb\x60\xbd\xa1\x4b\xfb\xb0\xa2\x51\x68\xe9\xd8\xe6\x2a\x91\x2a\x49\xa5\xf5\x08\xfd\xf7\x81\xd4\x8d\xb2\xe4\xa4\x69\x5a\x03\x2d\xc4\x23\xf2\x7c\xfc\x3e\x9e\x0b\x95\x09\x44\x3c\xa6\x6c\xbd\x80\x5c\xad\x0e\x7e\x1d\x8d\x56\x82\xa7\x10\x86\xab\x5c\xe5\x02\xc3\x10\x68\x9a\x71\xa1\x80\x2c\x25\x4f\x72\x85\x61\x39\x2e\xa7\xc5\x44\xa1\xa2\x29\xd6\x93\xcc\x78\xd6\x5a\x61\x02\x8c\x7f\x22\x0b\x78\xfa\xf0\xf0\x68\x54\xcd\xc9\x73\x1a\x57\x28\x6a\x9b\x51\xb6\xae\x17\x3f\xa7\x52\xcd\xe0\x94\x46\x6a\x67\x61\x39\x39\x08\x96\x44\x62\x98\xf2\x18\x93\x7a\xc9\x0b\x33\xa8\x5f\xd7\xc6\x5c\xd1\x64\x34\xd2\x7a\x72\x6e\xc7\xb2\x28\xaa\x19\x5a\xff\x95\xc8\x97\x24\xc5\xa2\xa8\xe7\xba\xa6\x06\xf4\xec\x97\xc3\xa3\x91\xd6\xf3\x76\xbd\xf1\x66\xb1\x8a\x62\x14\x25\x44\x4a\x77\xa1\x67\xdf\xf8\x8b\x11\x00\xc0\x78\x3c\x7e\xf9\xea\xe2\x6c\x01\x17\x1b\x2a\xa1\x9c\x4b\x25\x90\x5c\x71\x58\x23\x43\x41\x14\xc6\xb0\xdc\xc2\x93\x84\xe7\x31\x9c\x5d\x23\x53\x12\x9e\x95\x6f\xb8\xb0\x3e\xbc\x8d\x52\x99\x5c\xcc\xe7\x6b\xaa\x36\xf9\x32\x88\x78\x3a\x4f\x69\xb4\x21\x98\x90\xcf\xdb\x7c\x1e\x99\xa5\x07\x68\x97\x1e\xac\xeb\xa5\xbe\x5d\x9b\x4b\xa3\x68\xca\x63\xba\xa2\x18\x83\xc2\x34\x4b\x88\x42\x09\x56\x82\x57\x19\xb2\x93\xd7\xe7\xb0\xbe\x15\xaf\x9a\x79\xc1\x79\x22\xe7\x3c\x43\x46\x32\xda\xc3\x62\x31\x0a\x38\xc9\x48\xb4\x41\xf8\x39\x38\x84\xe7\x34\x42\x26\x31\x18\xd9\xd7\xa7\x1c\x18\x57\x80\x31\x55\xa0\x36\x58\x89\x91\x12\x96\x93\x24\xd9\x06\xb5\x5c\xe5\xe4\x18\x57\x10\x86\x94\x51\x15\x86\x9e\xc4\x64\x35\x83\xe5\x36\x23\x52\x86\xd1\x06\xa3\x8f\xc7\x4f\x49\x22\x51\xeb\xc9\x3b\x22\x64\x51\xcc\x40\xeb\x52\xfc\x63\xad\x27\xa7\xb8\x22\x79\xa2\xde\x91\x24\xc7\xa2\xd0\x5a\x77\x0d\x85\xd6\xf3\xdd\x29\x97\x5d\xc3\x4b\xce\x70\x60\xd6\xbc\x44\xf3\x17\x3b\xb1\x01\xd5\x6f\x3c\x1e\xbb\x01\x74\x00\x04\xca\xf0\x8c\x71\x45\x19\xc6\x40\xd9\xbe\x73\x6e\x7c\x34\x9c\x1a\xcb\x22\x23\x82\xa4\x0d\x43\x13\x4a\xd8\x8c\x80\xaf\x40\x99\xd0\x72\x80\x83\x3d\xdb\x5b\xa8\x6d\x86\x8e\x1f\xad\x4f\x89\x22\x17\xdb\x0c\x1d\xb4\x86\xa5\xcb\xaa\x79\x36\x27\x11\x54\xc7\x1f\x1a\x77\x12\x8e\x41\x8f\xfa\x9b\x36\xbf\x69\x0d\x35\x35\x58\x0e\x58\xa1\xf5\xe4\x4f\x22\x5f\x70\x81\x45\x31\xd3\x7a\xde\x0c\x46\x7d\xf8\x62\xd4\x45\x27\x4a\x09\xba\x34\x95\x27\x25\xd9\x57\xa2\x4f\xb5\xfe\x83\x48\xac\xc6\x77\x43\xaf\x9f\xe8\xca\x86\xaf\x1b\x85\x8b\x3d\xd0\xcd\x5e\x9b\x53\x3a\x6e\x64\x1f\xc0\xc0\x44\xe2\xad\xae\xc2\x9b\x7d\xd9\x45\xbf\xdb\x94\x4a\x51\x6d\x78\xdc\x64\x91\x49\xf4\x30\xa6\x91\xf2\xa2\x44\xce\x20\xa6\x1f\x95\x0f\x07\x8f\x8d\x26\x4d\xc4\x4c\x17\xee\x69\xbf\x41\x95\x0b\x26\x6d\x92\x9a\x85\x40\x64\x1d\xc9\xa3\xdd\xa8\x34\xee\x16\x70\x62\xe7\x05\xdd\x48\x5b\x58\x63\x6b\x13\xd6\xed\x02\x4e\x18\x50\x26\x15\x61\x11\xde\x29\x7a\x45\xe9\xd4\x99\x3a\x18\xa2\x25\x8c\xad\xfa\x41\x8c\x12\x05\x25\x09\xfd\xaf\x6a\x14\x9e\xd9\xef\x0c\xa2\x44\xfa\xf5\x7c\x47\xf8\x52\xc4\x4c\xf0\x0c\x85\xda\x36\x0a\xd6\x72\xdb\x3a\xe4\x77\xa4\x7a\x86\xaa\xd4\xe9\xc6\x7c\x74\xb3\x5b\x9f\xa2\x8c\x04\xcd\x14\xe5\xac\xe8\x75\x99\xbe\x5a\xb7\x26\xfb\x80\x40\x03\x69\x3d\xa0\x50\x37\xac\x2a\xf2\xf5\x30\x90\xa8\x14\x8a\x61\x0d\xda\x72\xdb\x55\xe3\xef\x1f\xa6\xc6\x9d\x4b\xe0\xdd\x8a\x9e\x6d\x3b\x5a\x4f\x4e\x72\xc5\x6d\x5a\x4d\xce\xe5\xdb\xb7\xe7\xa7\xd7\x0f\x8b\x4e\x01\x68\x20\xa9\x04\xd3\x23\x16\xb7\xe7\xaa\x54\xc2\x33\x57\x9c\xc0\xfc\xf7\xd0\xf3\x7d\x7b\x93\x68\xbd\x5b\xac\x37\x4f\x9f\x3c\x78\xf0\xe0\xb7\x7b\x83\xd5\x37\xad\x20\x57\x11\xe3\x9f\x3d\x3f\xa0\x92\xaf\xb8\x48\x89\xf2\xa6\x17\x53\x1f\x7e\x82\xe9\x3f\xd3\x72\x07\x7d\xcc\xb2\x0e\xdd\x0a\xe2\x56\x9f\x46\xb0\x4b\x57\xba\x33\x96\xa7\x8e\x5f\x92\x24\xfc\x33\xc6\xe1\xb5\xe9\xa3\xa6\x61\xbc\x37\x52\x1b\x23\x59\x26\x68\xbb\xab\xb4\x7d\xba\x6d\xd0\x4e\x81\x06\xb7\x42\x1b\xc8\xdd\x85\x1f\x7a\x37\xb5\xc9\xb9\x7c\xc2\x99\x22\x94\xa1\xa8\xf7\x64\x6e\x93\xae\xd1\x11\xda\x94\x75\x89\xca\xd3\x35\xb3\xc2\xe8\x26\xf3\xa5\x31\x9a\x7f\x5d\x02\xbe\xdf\x15\x49\x10\x2a\x11\xec\x6e\xce\x84\xe0\xc2\xeb\x49\x38\x3e\x67\xd7\x24\xa1\x31\x54\x0a\xac\xb8\x80\xab\x16\xed\x0a\xde\xeb\xc3\xe2\xc3\x0c\xd2\x5c\x2a\x58\x22\x10\x28\xc1\x4d\x64\xbf\xd7\x47\xc5\x87\xf1\x9e\x9a\x58\xff\x82\xea\x8c\xc7\x33\x18\x07\xff\x72\xca\xbc\x94\x64\x9e\x54\x62\xb6\x4b\x0c\x0e\x60\x88\x91\x3f\xbb\x05\xa1\xa1\xd2\x47\xe8\xf9\xea\x2c\xae\xe2\x7d\x57\x7e\x6b\xec\x1a\x2e\xbb\x86\x4e\x26\xd4\xfb\xb7\x67\x45\xd9\x0e\xe6\xfd\xce\xa3\x7f\x1c\x9e\x3e\x2c\xfc\xf6\x38\x38\xb3\x8d\x4a\x1f\x15\xe3\xbd\xca\xb7\xcb\x7b\x82\x0c\xc9\xd1\x93\xa2\x4a\x19\xab\x42\xf3\x3c\x79\x83\x9f\x72\x2a\x30\xbe\x4b\x61\xe8\xd1\x1f\x66\x5b\xba\xb8\xaa\x58\xda\x9b\x0d\xc2\x95\x71\x77\x35\xf6\xfb\xdf\x3e\xce\x4e\xca\xec\x7c\x67\x5c\x92\xb2\x6e\xdb\xcf\x21\xf2\xe5\x39\xb2\xb5\xda\xec\xdf\xab\x01\x31\x00\x40\x58\x0c\x09\x32\xaf\xe9\x22\xf0\x18\xb4\x76\x3c\xdc\x8f\x51\x62\xbd\x34\xc7\x97\xa0\x34\x5d\x89\x30\xe0\x02\xf0\x53\x4e\x12\x50\xdc\x2c\x70\x00\x07\x39\xbb\x94\x0c\x43\xca\xee\xc1\xf0\x91\x61\xd8\x7a\xf8\xae\x0c\xd7\x02\x89\x42\x31\x4c\xb2\xc5\x1c\x26\xe9\xb0\x2a\x8f\x91\xa6\x9d\xea\x7d\x13\xc5\xe6\xc5\x63\xad\x27\x67\x5f\xa2\x24\x97\xf4\x1a\x1b\x1f\xc7\x5a\xcf\xfb\xd6\xf2\xa8\xcb\xe7\x7d\x5f\x52\xdf\x1c\xc8\xb6\x7a\x96\xef\xdb\x73\xd7\xfa\xb2\xbf\x0d\x57\xa7\xc1\x7d\x5e\x39\xfb\xdc\x17\x1f\x95\x56\x65\x74\x7c\x8b\x70\x8f\x3a\xc2\xd5\x3e\xba\xc2\xd5\xd6\x32\x82\x7e\xbc\x70\x9d\x70\xea\x68\x57\xa3\xef\xd5\xae\x9e\x70\xe5\x6c\x75\x5f\xd8\xb5\xda\xbd\x26\xe6\xae\xc9\xbe\x52\x3b\x33\x10\x18\x48\x24\x22\xda\x78\x62\xaa\xb5\x6e\x1c\x14\x53\xf7\x6e\xfa\xbd\x35\x4a\x89\x8a\x36\x90\x95\x60\xb6\x65\xb4\xc0\x83\x2c\x5b\x62\x65\x6a\x9d\x2b\x4c\xe5\x7d\x0a\x64\xe5\xe0\x7e\xd5\x83\xe5\xe9\x12\x85\x69\x69\xd4\xb8\xfb\xaa\x42\x59\x01\xef\xcb\x83\x9a\x58\x99\x08\xdf\x4e\xb3\xaa\x92\x3f\x94\xe6\x2d\xd5\xf2\x46\xa6\x2d\xb7\xf2\x56\xba\xd3\x05\xdb\x46\xde\xfd\x9b\xc5\xe0\xf5\xb9\x73\x7f\xae\xbf\xe3\x0d\x48\xf5\x87\xc5\xff\x03\x00\x00\xff\xff\x12\x57\x94\x0f\x8a\x15\x00\x00"),
		},
		"/python/requirements.mustache": &vfsgen۰CompressedFileInfo{
			name:             "requirements.mustache",
			modTime:          time.Date(2019, 8, 8, 1, 15, 34, 904035169, time.UTC),
			uncompressedSize: 120,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xce\xac\x50\xb0\xb3\x55\x30\xd4\x33\x34\xd4\x33\xe0\x2a\x4e\x2d\x29\x2d\x28\xc9\xcf\xcf\x29\x06\x09\x1a\x19\xea\x19\xe8\x19\x70\x55\x57\x2b\xbb\xa4\x16\x14\xd7\xd6\x82\x58\x9e\xc5\x5e\xc1\xfe\x7e\x60\xb6\x3e\x12\x5b\xd9\xb3\xd8\x23\x24\x24\xa0\xb6\x96\xab\x28\xb5\xb0\x34\xb5\xb8\x04\x62\x80\x9e\x11\x58\xbf\x3e\x5c\xb6\xba\x5a\x1f\x62\x16\x20\x00\x00\xff\xff\x09\xeb\x33\xb5\x78\x00\x00\x00"),
		},
		"/python/setup.mustache": &vfsgen۰CompressedFileInfo{
			name:             "setup.mustache",
			modTime:          time.Date(2019, 8, 8, 7, 1, 46, 974393132, time.UTC),
			uncompressedSize: 660,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x92\x4f\x6b\xe3\x30\x10\xc5\xef\xfa\x14\x43\x7c\x48\x0b\x69\x7c\x5d\x02\x3a\x14\x37\x87\x42\x9b\x96\xd4\xed\x25\x14\xa3\xb5\x27\xb1\xa8\x2c\x69\xa5\x51\x8b\x31\xfe\xee\x8b\x2d\xe7\x1f\xbd\x79\xde\x4f\xc3\xf0\xde\x73\x02\xa5\xa9\xa4\x3e\xac\x20\xd0\xfe\xee\x0f\x63\xb2\xb1\xc6\x11\xf8\xd6\xb3\xbd\x33\x0d\x78\xa4\x60\xc9\x18\xe5\xe1\x88\x06\x65\x01\x7b\xa9\xab\xc2\x8a\xf2\x4b\x1c\xd0\x33\xd6\x75\xc9\x33\x92\xa8\x04\x89\xbe\x67\x9b\xfb\xe7\x35\x70\x98\x75\xdd\x6b\x7c\xb1\x11\x0d\xf6\xfd\x8c\x7d\xac\xb7\x6f\x8f\x2f\x9b\xc8\x3e\xd0\x79\x69\xf4\xa0\x3f\xac\xdf\xb2\xed\xe3\x6b\x7e\x62\x0f\xe8\x4b\x27\x2d\x4d\x3c\x7b\xd9\xe4\xf7\x59\x1e\x59\x66\x34\x89\x92\x06\xfd\x7d\xfb\x14\xb5\xf7\xed\xd3\x30\xb3\x04\x72\x03\x52\x7b\x12\x4a\x01\xd5\x08\x4a\xfe\x75\xc2\xb5\x0b\x70\x41\x8f\xc2\xde\x28\x65\x7e\xa4\x3e\xb0\x84\x25\x60\x5b\xaa\x8d\x3e\x6d\xdc\x21\x2c\xa3\xee\xd0\xe1\xbf\x20\xbd\x24\x5c\x5d\xa4\xc0\x12\xa8\x89\xec\x2a\x4d\x6d\x6b\xe5\x32\xae\x2f\x8d\x3b\x8c\x73\x7a\xf1\x90\x8d\xdf\x37\x0c\x00\x40\x8b\x06\xf9\x10\xca\x62\x1c\xbf\xa3\x71\x3e\xa5\x11\xc5\xea\xec\x98\x5f\xc4\x11\xa1\x08\x54\x1b\x57\x60\x23\xa4\xe2\x53\x18\x91\x04\xa7\xf8\xc9\x7f\x94\xbe\xb0\xfd\x31\xae\xf2\x7c\x37\xcb\x94\x09\x15\xac\xbf\x51\x93\x9f\x2d\x7e\x17\xf2\x19\x37\x26\xfb\xc5\x68\xd9\xa1\xe7\xbb\x09\x1c\x0b\xe6\x57\x75\xdf\xdc\x5e\xd1\x62\x68\x9d\x77\xf3\xf9\x0a\x76\x73\x6f\xb1\x4c\x71\x3c\xb8\x6c\x45\xa3\xe6\x9f\xfd\xf1\x46\xa9\x42\x85\xc5\xd5\x52\xee\x02\xb2\x5b\xd6\x75\xe9\xf9\xef\xf9\x1f\x00\x00\xff\xff\x7f\x55\xd9\x30\x94\x02\x00\x00"),
		},
		"/python/typing.mustache": &vfsgen۰CompressedFileInfo{
			name:             "typing.mustache",
			modTime:          time.Date(2019, 8, 8, 6, 56, 5, 122341728, time.UTC),
			uncompressedSize: 123,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\xf6\x2c\x0e\x2e\x29\xca\xcc\x4b\xaf\xad\x2d\x2e\x29\xaa\xae\xd6\x47\xf0\xc1\x92\x9e\x79\x25\xa9\xe9\xa9\x45\xb5\xb5\x99\x79\x25\x60\x59\xb8\x00\x58\xda\xaf\x34\x37\x09\xc4\x49\xcb\xc9\x4f\x84\xc8\xc3\x44\xc0\xd2\x4e\xf9\xf9\x39\xa9\x89\x79\xb5\xb5\x49\xf9\xf9\x39\x60\x69\xb8\x08\x20\x00\x00\xff\xff\x9f\xfd\x1d\xec\x7b\x00\x00\x00"),
		},
		"/python/util.mustache": &vfsgen۰CompressedFileInfo{
			name:             "util.mustache",
			modTime:          time.Date(2019, 8, 17, 10, 31, 29, 193505718, time.UTC),
			uncompressedSize: 3439,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x4d\x8b\xf3\x36\x10\xbe\xfb\x57\x0c\x39\x25\x10\xcc\xfb\x5e\x4a\x09\xec\xa1\xf0\x96\x52\x28\x3d\x94\xed\x69\x1b\x8c\x62\x4f\xb2\xea\xda\x92\x91\x26\xdb\x4d\xbb\xfd\xef\x65\x46\x96\x23\x7f\xe4\x63\x59\x9a\x43\xe2\xc8\x33\xcf\x48\xcf\xcc\x3c\x1a\xdd\xb4\xd6\x11\x54\x8a\x90\x74\x83\x59\xd6\x2d\x78\xfd\x16\x1f\xe9\xd4\x6a\x73\xc8\xb2\xac\xc2\x3d\x14\x15\x7a\x74\x5a\xd5\xfa\x6f\x5c\x56\x8a\xd4\x1a\x5e\x6a\xe5\xfd\x6a\x93\x01\x00\x2c\x16\x8b\x6f\x67\x03\x0f\x95\x2e\x69\x0d\xb5\xf6\xb4\x06\x4f\x0e\xb4\x21\x0b\xca\x80\xdd\xfd\x89\x25\xe5\x99\x38\x6d\x5a\xe5\x54\xc3\x7b\x50\x9b\xc4\x03\xac\x63\x9f\x3c\xb5\x91\x58\x1b\x28\xf9\x07\x6a\x4d\xe8\x54\xbd\xee\x0c\xb5\x39\x80\xdd\x77\xef\x8c\x6a\x30\xc2\x3b\xa4\xa3\x33\x9b\x3e\x68\xb7\x51\xf9\xd5\x7b\x89\x0b\xda\xc3\xaf\xd6\x60\x38\x05\x7f\x82\x93\x2c\x66\xd1\x52\xa2\x83\x36\xcc\x4e\xae\x0d\xe1\x01\x5d\x41\xa7\x16\x3d\x6f\xa1\x7f\xbb\xdc\xd7\x56\x85\x03\xaf\x61\x67\x6d\xbd\x9a\xc0\xa6\x34\x16\xad\xd3\x8d\x26\xfd\x3a\x24\x54\x5c\xb0\xee\xc3\x3e\x3c\x74\x07\xb8\x0e\x16\x6c\x04\x69\x0e\x22\x26\x3a\xe7\x87\x09\x52\x0a\xc4\x06\xf7\xc1\xf0\xc3\x4d\x28\x36\x1a\xc3\x31\x75\xcb\x70\x5a\x06\x0d\x85\x96\x17\x3f\xa1\x41\xa7\xcb\x1f\x6a\xad\xfc\x19\x37\x86\xcf\x8b\xc2\x93\x2b\x8a\xe5\x2a\xf7\xa4\x1c\xf9\xbf\x34\x3d\x2f\x17\x9d\xf3\x2f\xda\xd3\x22\xe1\xfb\x12\x4d\x5c\x60\x29\xdd\x79\x51\x28\x77\xf0\x45\xf1\xf4\x65\xbb\xfa\x60\xcc\x6f\xba\xbc\x2b\x26\x97\xf6\x7c\xcc\xaf\xdb\xc8\x8a\xbf\xce\x64\x63\x2b\xac\x87\x65\x32\xed\xcb\x0b\x05\x35\xdf\xa1\x64\xa1\x37\x97\x84\xcc\x36\x25\xb7\x08\xd9\x74\x2b\x37\xdb\x72\xdc\x7d\xda\x70\x5f\x5b\x73\x58\xc3\xb8\x3f\x3a\x2c\xc7\xe1\xc5\x10\xde\xc5\x12\xde\x83\x29\xbc\x8b\x78\xbc\x8b\xf1\xa0\x7d\xc9\x9d\xce\x7c\xbd\xaa\xfa\x88\xf0\x10\x76\x93\xd6\xda\x5b\x89\x2d\xc1\xef\x46\x97\xb6\xc2\x1f\x8d\x7c\x3b\x67\xdd\xd4\x95\x1b\xfb\x38\x75\x7d\x3c\xb5\x97\x3c\xd8\x36\x4b\xb2\x25\xeb\x73\x49\xe9\x1a\x53\xde\x9f\x73\xf1\x5b\xf0\x62\x49\x74\xfa\xa0\x8d\xaa\x03\xc2\x3d\xda\x35\x13\x71\xd2\xc0\x41\x17\x2f\xe4\xbe\x13\x4d\x4e\xac\xa2\x51\xe2\xc3\xbb\x4d\xa2\xc0\x9c\x9d\x74\x79\xb8\xc1\x80\x90\xe6\x91\x57\x2e\x27\x6b\xef\xac\x54\x17\x1e\x49\xd7\x79\xab\x9c\x47\x07\xdd\x8d\x23\xff\xc6\x6d\x20\x8b\xf1\x3c\xa2\x3b\xcb\x41\x8e\x7e\x16\xdf\x51\x96\x3a\xdf\xe0\x75\x81\x23\x51\xa6\x0f\xf0\x24\xba\x17\xb8\x7a\x7c\x8e\x8c\x80\x7f\xb6\xc7\xba\x82\x1d\xf2\x0d\xa0\xbd\xfd\xfe\xbb\x2f\x5f\x7b\x73\xd8\x5b\xd7\x28\xfa\x3c\xc3\x21\xf6\x98\x65\xb9\xb9\xff\x27\xa6\x3f\x4d\xf1\x54\xb2\xe6\x49\x8e\x57\x3e\xab\x24\x53\x2d\x7e\xd7\x27\x84\x94\xb6\xf3\x3b\x16\x0f\xed\xe9\xb6\x3e\x0d\xd8\x95\x70\xf3\x23\x82\xf1\xa4\x4c\x79\x56\x96\xdd\xa9\x55\xde\x17\xe5\x33\x96\x2f\x0f\x8f\xee\x88\xab\x7e\x42\x30\x96\x7a\xfb\xdc\xb6\x68\x54\xab\xc3\x84\x30\x95\x75\x16\x0e\x59\xdc\x5b\x07\x8a\x58\x0c\xf9\x5b\xcc\xfb\x21\x83\xd0\x69\xc2\xc6\x2f\xe7\x51\x57\x83\xfb\x31\x4e\x32\xbc\x0b\x1e\x5c\xe0\x8f\xc1\x9d\xc4\x1f\x65\xaa\xf3\x06\x39\x9c\xde\x1d\x09\x8b\x46\xb5\x4f\xfc\x6f\xcb\x81\x05\xe6\x82\xab\x8f\xce\x5d\x46\x97\x61\xb6\x63\xde\x57\xa3\x2b\x30\x55\xc8\xa7\x6b\x31\xb7\x03\x37\x8f\xc4\xab\xfd\x81\xd7\x1d\x37\x83\xc9\x53\xb0\x13\xbe\x56\x5d\x0a\x3a\x6e\xa3\xef\x9c\x0e\x27\x37\xff\xce\xbe\x61\x15\xfc\xe7\x6b\x52\x85\xaa\x94\x93\x93\x07\xac\xb1\x41\x43\x7e\xae\x2a\xc5\x70\xf6\x8a\x4c\xca\x73\x5c\x97\xe7\x0d\xdc\xb8\x3c\x13\xd4\x2a\x2d\xfd\x4e\x04\x7a\xdc\xd1\xd5\xf0\x34\x20\xcd\x1f\x77\xc5\xe4\xe0\x03\xee\xb9\x12\xa3\x55\xac\x84\xed\x1c\x89\xc9\x28\x73\x07\x89\xd2\x95\xf7\x90\x18\x7b\xff\x2a\x89\x6c\xf4\x79\x12\x19\x65\xa4\xa4\x11\x77\x44\xe2\x3f\x2f\x9b\x51\xf1\x5d\x27\xf0\x65\x0d\xaf\xd3\xfe\x95\x99\xe2\xdf\xff\x02\x00\x00\xff\xff\x3d\x82\x38\xde\x6f\x0d\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/nodejs"].(os.FileInfo),
		fs["/python"].(os.FileInfo),
	}
	fs["/python"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/python/README.md"].(os.FileInfo),
		fs["/python/__init__.mustache"].(os.FileInfo),
		fs["/python/__init__mod.mustache"].(os.FileInfo),
		fs["/python/base_model.mustache"].(os.FileInfo),
		fs["/python/model.mustache"].(os.FileInfo),
		fs["/python/requirements.mustache"].(os.FileInfo),
		fs["/python/setup.mustache"].(os.FileInfo),
		fs["/python/typing.mustache"].(os.FileInfo),
		fs["/python/util.mustache"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
